<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.socket.io/4.5.3/socket.io.min.js" integrity="sha384-WPFUvHkB1aHA5TDSZi6xtDgkF0wXJcIIxXhC6h8OT8EH3fC5PWro5pWJ1THjcfEi" crossorigin="anonymous"></script>
    <title>Moveo - Login</title>
    <style>
        * , body {
            padding: 0;
            margin: 0;
            box-sizing: border-box;
            font-family: 'Lato', sans-serif;
        }
        body {
            background-color: #f7f4f4;
            width: 100vw;
            height: 100vh;
            /* layout */
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: space-between;
        }
        nav {
            background-color: #fff;
            width: 100%;
            height: 5rem;
            /* layout */
            display: flex;
            align-items: center;
            justify-content: center;
            color: #4A4164;
        }
        .codeblock-container {
            width: 100%;
            height: calc(100% - 5rem);
            /* layout */
            display: flex;
            align-items: center;
            justify-content: center;
            padding-bottom: 4rem;
        }
        textarea {
            width: 60%;
            height: 60%;
            border: 2px solid #333;
            border-radius: .7rem;
        }
    </style>
    <script defer>
        // create socket
        const socket = io('http://localhost:3000/')

        // debounce - increase performance by sending onchange-requests only after an interval has passed.
        const debounce = (func, wait, immediate) => {
            let timeout
            return function executedFunction() {
                let context = this, args = arguments
                let later = () => {
                    timeout = null
                    if (!immediate) func.apply(context, args)
                }
                let callNow = immediate && !timeout;
                clearTimeout(timeout)
                timeout = setTimeout(later, wait)
                if (callNow) func.apply(context, args)
            }
        }

        // get cookie by name
        const getCookie = name => {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }

        const changeHandler = () => {
            debounce(() => {
                const value = document.querySelector('#code').value
                io.emit('modify', {
                    auth_token: getCookie('x-auth-token'),
                    codeblock_token: 
                })
                // change val via socket
            }, 500)
        }
    </script>
</head>
<body>
    <!-- login page -->
    <nav>
        <h1>Codeblock room: <%= uuid %></h1>
    </nav>
    <div class="codeblock-container">
        <textarea id="code" name="code" cols="30" rows="10" <%= isMentor ? 'disabled' : '' %> onchange="changeHandler()">
            <%= def_code %>
        </textarea>
    </div>
</body>
</html>